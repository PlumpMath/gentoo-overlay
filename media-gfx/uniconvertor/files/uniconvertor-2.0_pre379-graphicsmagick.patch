--- a/src/uc2/libimg/_libimg.c.orig	2017-09-09 13:30:47.188232818 +0200
+++ b/src/uc2/libimg/_libimg.c	2017-09-09 13:30:55.267188081 +0200
@@ -17,7 +17,7 @@
  */
 
 #include <Python.h>
-#include <wand/MagickWand.h>
+#include <wand/magick_wand.h>
 
 static PyObject *
 im_InitMagick(PyObject *self, PyObject *args) {
@@ -21,8 +21,13 @@
 
 static PyObject *
 im_InitMagick(PyObject *self, PyObject *args) {
+	const char *path = NULL;
+	PyObject *py_path = NULL;
+	if (PyArg_UnpackTuple(args, "path", 0, 1, &py_path)) {
+		path = PyString_AsString(py_path);
+	}
 
-	MagickWandGenesis();
+	InitializeMagick(path);
 
 	Py_INCREF(Py_None);
 	return Py_None;
@@ -30,8 +35,7 @@
 
 static PyObject *
 im_TerminateMagick(PyObject *self, PyObject *args) {
-
-	MagickWandTerminus();
+	DestroyMagick();
 
 	Py_INCREF(Py_None);
 	return Py_None;
@@ -53,7 +57,7 @@
 	void *magick_pointer;
 	MagickWand *magick_wand;
 	char *filepath = NULL;
-	MagickBooleanType status;
+	MagickBool status;
 
 	if (!PyArg_ParseTuple(args, "Os", &magick_pointer, &filepath)){
 		return Py_BuildValue("i", 0);
@@ -75,7 +79,7 @@
 	void *magick_pointer;
 	MagickWand *magick_wand;
 	char *filepath = NULL;
-	MagickBooleanType status;
+	MagickBool status;
 
 	if (!PyArg_ParseTuple(args, "Os", &magick_pointer, &filepath)){
 		return Py_BuildValue("i", 0);
@@ -130,7 +134,7 @@
 
 	void *magick_pointer;
 	MagickWand *magick_wand;
-	MagickBooleanType status;
+	MagickBool status;
 
 	if (!PyArg_ParseTuple(args, "O", &magick_pointer)){
 		Py_INCREF(Py_None);
@@ -165,7 +165,6 @@
 //	  ColorSeparationType,
 //	  ColorSeparationMatteType,
 //	  OptimizeType,
-//	  PaletteBilevelMatteType
 
 static PyObject *
 im_GetImageType(PyObject *self, PyObject *args) {
@@ -212,9 +211,6 @@
 	else if (img_type == OptimizeType){
 		return Py_BuildValue("s", "OptimizeType");
 	}
-	else if (img_type == PaletteBilevelMatteType){
-		return Py_BuildValue("s", "PaletteBilevelMatteType");
-	}
 	else {
 		return Py_BuildValue("s", "UndefinedType");
 	}
@@ -227,7 +223,6 @@
 //GRAYColorspace,
 //TransparentColorspace,
 //OHTAColorspace,
-//LabColorspace,
 //XYZColorspace,
 //YCbCrColorspace,
 //YCCColorspace,
@@ -236,15 +231,12 @@
 //YUVColorspace,
 //CMYKColorspace,
 //sRGBColorspace,
-//HSBColorspace,
 //HSLColorspace,
 //HWBColorspace,
 //Rec601LumaColorspace,
 //Rec601YCbCrColorspace,
 //Rec709LumaColorspace,
 //Rec709YCbCrColorspace,
-//LogColorspace,
-//CMYColorspace
 
 static PyObject *
 im_GetColorspace(PyObject *self, PyObject *args) {
@@ -273,9 +265,6 @@
 	else if (cs == OHTAColorspace){
 		return Py_BuildValue("s", "OHTAColorspace");
 	}
-	else if (cs == LabColorspace){
-		return Py_BuildValue("s", "LabColorspace");
-	}
 	else if (cs == XYZColorspace){
 		return Py_BuildValue("s", "XYZColorspace");
 	}
@@ -300,9 +289,6 @@
 	else if (cs == sRGBColorspace){
 		return Py_BuildValue("s", "sRGBColorspace");
 	}
-	else if (cs == HSBColorspace){
-		return Py_BuildValue("s", "HSBColorspace");
-	}
 	else if (cs == HSLColorspace){
 		return Py_BuildValue("s", "HSLColorspace");
 	}
@@ -321,12 +307,6 @@
 	else if (cs == Rec709YCbCrColorspace){
 		return Py_BuildValue("s", "Rec709YCbCrColorspace");
 	}
-	else if (cs == LogColorspace){
-		return Py_BuildValue("s", "LogColorspace");
-	}
-	else if (cs == CMYColorspace){
-		return Py_BuildValue("s", "CMYColorspace");
-	}
 	else {
 		return Py_BuildValue("s", "UndefinedColorspace");
 	}
