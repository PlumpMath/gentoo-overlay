# HG changeset patch
# User Dennis Schridde <devurandom@gna.org>
# Date 1249827032 -7200
# Node ID 093c8cb31f33079dc2ab5ef303a91b01d88d3c88
# Parent  6724773753d960c9ea5a562bbbf990e0ad73b483
Support '*' globs in entry and value names, notice and reject '%' globs

diff -r 6724773753d9 -r 093c8cb31f33 src/imap-annotatemore-plugin.c
--- a/src/imap-annotatemore-plugin.c	Sat Aug 08 11:50:51 2009 +0200
+++ b/src/imap-annotatemore-plugin.c	Sun Aug 09 16:10:32 2009 +0200
@@ -31,9 +31,9 @@
 		return FALSE;
 	}
 
-	if (entry[0] != '/') {
+	if (entry[0] != '/' && entry[0] != '*' && entry[0] != '%') {
 		client_send_tagline(cmd,
-				    "BAD entry name must start with slash.");
+				    "BAD entry name must start with slash or be a glob.");
 		return FALSE;
 	}
 
@@ -56,6 +56,11 @@
 		return ATTR_PRIVATE;
 	} else if (strcmp(attribute, "value") == 0) {
 		return ATTR_BOTH;
+	} else if (strchr(attribute, '*')) {
+		return ATTR_BOTH;
+	} else if (strchr(attribute, '%')) {
+		client_send_tagline(cmd, "BAD '%' globs not supported.");
+		return ATTR_INVALID;
 	} else {
 		client_send_tagline(cmd,
 				    "BAD only 'value.shared' and"
@@ -87,30 +92,94 @@
 }
 
 
+static inline int my_strchr_num(const char *s, int c)
+{
+	int num = 0;
+	const char * last = strchr(s, c);
+	while (last != NULL) {
+		num++;
+		last = strchr(last+1, c);
+	}
+	return num;
+}
+
+
 static bool get_and_send_annotation(struct client_command_context *cmd,
 				    const char *mailbox,
 				    const char *entry,
 				    enum attribute_properties scope)
 {
-	const char *value;
 	bool success = TRUE;
 
-	if ((scope & ATTR_PUBLIC) != 0) {
-		value = NULL;
-		success = metadata_get_metadata_entry(cmd, mailbox, entry,
-						       &value, FALSE);
-		send_annotation_line(cmd, mailbox, entry, value, FALSE);
-	}
+	if (strchr(entry, '*')) {
+		int entrylen = strlen(entry);
 
-	if (!success) {
+		/* We do not support more than one glob, and at no other location than the end */
+		if (my_strchr_num(entry, '*') == 1 && entry[entrylen-1] == '*') {
+			const char *entrypattern = t_strdup_until(entry, &entry[entrylen-1]);
+
+			if ((scope & ATTR_PUBLIC) != 0) {
+				const int max_entries = 256;
+				const char *entries_r[max_entries][2];
+
+				success = metadata_get_metadata_entries(cmd, mailbox, entrypattern,
+									max_entries, entries_r, FALSE);
+
+				if (success) {
+					int i;
+
+					for (i = 0; i < max_entries && entries_r[i][0] != NULL; i++) {
+						send_annotation_line(cmd, mailbox, entries_r[i][0], entries_r[i][1], FALSE);
+					}
+				}
+			}
+
+			if (!success) {
+				return FALSE;
+			}
+
+			if ((scope & ATTR_PRIVATE) != 0) {
+				const int max_entries = 256;
+				const char *entries_r[max_entries][2];
+
+				success = metadata_get_metadata_entries(cmd, mailbox, entrypattern,
+									max_entries, entries_r, TRUE);
+
+				if (success) {
+					int i;
+
+					for (i = 0; i < max_entries && entries_r[i][0] != NULL; i++) {
+						send_annotation_line(cmd, mailbox, entries_r[i][0], entries_r[i][1], FALSE);
+					}
+				}
+			}
+		} else {
+			client_send_tagline(cmd, "BAD '*' globs only supported at end of pattern.");
+			return FALSE;
+		}
+	} else if (strchr(entry, '%')) {
+		client_send_tagline(cmd, "BAD '%' globs not supported.");
 		return FALSE;
-	}
+	} else {
+		const char *value;
 
-	if ((scope & ATTR_PRIVATE) != 0) {
-		value = NULL;
-		success = metadata_get_metadata_entry(cmd, mailbox, entry,
-						      &value, TRUE);
-		send_annotation_line(cmd, mailbox, entry, value, TRUE);
+		if ((scope & ATTR_PUBLIC) != 0) {
+			value = NULL;
+			success = metadata_get_metadata_entry(cmd, mailbox, entry,
+								&value, FALSE);
+			send_annotation_line(cmd, mailbox, entry, value, FALSE);
+		}
+
+		if (!success) {
+			return FALSE;
+		}
+
+		if ((scope & ATTR_PRIVATE) != 0) {
+			value = NULL;
+			success = metadata_get_metadata_entry(cmd, mailbox, entry,
+								&value, TRUE);
+			send_annotation_line(cmd, mailbox, entry, value, TRUE);
+		}
 	}
 
 	return success;
diff -r 6724773753d9 -r 093c8cb31f33 src/metadata-plugin.c
--- a/src/metadata-plugin.c	Sat Aug 08 11:50:51 2009 +0200
+++ b/src/metadata-plugin.c	Sun Aug 09 16:10:32 2009 +0200
@@ -39,7 +39,7 @@
 	return metadata_allow_private;
 }
 
-
+// WARNING INVALID SYMBOL PREFIX: Name suggests lib-storage
 static const char *mailbox_key_path(struct mailbox_list *list,
 				    const char *mailboxname)
 {
@@ -233,6 +233,70 @@
 }
 
 
+bool metadata_get_metadata_entries(struct client_command_context *cmd,
+				 const char *mailboxname, const char *entrypattern,
+				 int max_entries, const char *entries_r[][2], bool private)
+{
+	int num_entries;
+	struct mail_storage *storage;
+	struct dict_iterate_context *iter;
+	const char *keypattern;
+	const char *mailboxpattern;
+	const char *key;
+	const char *value;
+	int mailboxpatternlen;
+
+	if (metadata_debug)
+		i_info("metadata_get_metadata_entries: mailboxname=%s, entrypattern=%s,"
+		       " private=%d", mailboxname, entrypattern, private);
+
+	if (!client_verify_mailbox_name(cmd, mailboxname,
+					CLIENT_VERIFY_MAILBOX_SHOULD_EXIST))
+		return FALSE;
+
+	storage = client_find_storage(cmd, &mailboxname);
+	if (!storage)
+		return FALSE;
+
+	keypattern = create_dict_key(storage, mailboxname, entrypattern, private);
+	mailboxpattern = create_dict_key(storage, mailboxname, "", private);
+	mailboxpatternlen = strlen(mailboxpattern);
+
+	if (metadata_debug)
+		i_info("metadata_get_metadata_entries: dict keypattern=%s mailboxpattern=%s", keypattern, mailboxpattern);
+
+	num_entries = 0;
+	iter = dict_iterate_init(metadata_dict, keypattern,
+				 DICT_ITERATE_FLAG_RECURSE
+				 | DICT_ITERATE_FLAG_SORT_BY_KEY);
+	while (dict_iterate(iter, &key, &value) > 0) {
+		if (num_entries >= max_entries) {
+			num_entries = -1;
+			break;
+		}
+
+		if (metadata_debug)
+			i_info("metadata_get_metadata_entries: found key=%s, value=%s", key, value);
+
+		entries_r[num_entries][0] = key + mailboxpatternlen;
+		entries_r[num_entries][1] = value;
+
+		num_entries++;
+	}
+	dict_iterate_deinit(&iter);
+
+	if (num_entries < 0) {
+		client_send_tagline(cmd, "NO Result truncated.");
+	} else {
+		entries_r[num_entries][0] = NULL;
+	}
+
+	if (metadata_debug)
+		i_info("metadata_get_metadata_entries: found %d entries", num_entries);
+
+	return num_entries >= 0;
+}
+
 bool metadata_get_metadata_entry(struct client_command_context *cmd,
 				 const char *mailboxname, const char *entry,
 				 const char **value_r, bool private)
diff -r 6724773753d9 -r 093c8cb31f33 src/metadata-plugin.h
--- a/src/metadata-plugin.h	Sat Aug 08 11:50:51 2009 +0200
+++ b/src/metadata-plugin.h	Sun Aug 09 16:10:32 2009 +0200
@@ -6,6 +6,10 @@
 
 bool metadata_private_allowed(void);
 
+bool metadata_get_metadata_entries(struct client_command_context *cmd,
+				 const char *mailboxname, const char *entrypattern,
+				 int max_entries, const char *entries_r[][2], bool private);
+
 bool metadata_get_metadata_entry(struct client_command_context *cmd,
 				 const char *mailboxname, const char *entry,
 				 const char **value_r, bool private);
